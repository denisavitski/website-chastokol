---
import Layout from '@layout/Layout.astro'

// @ts-ignore
const modules = (await (Astro as any).glob('src/**/*.astro')) as Array<any>

const components = new Map<string, Array<string>>()

modules.forEach((module) => {
  const path = module.default.moduleId.split('src')[1]

  const splitted = path.slice(1).split('/')
  const folder = splitted[0]

  if (
    folder === 'elements' ||
    folder === 'blocks' ||
    folder === 'pages' ||
    folder === 'singletons'
  ) {
    let folderArray = components.get(folder)

    if (!folderArray) {
      folderArray = []
      components.set(folder, folderArray)
    }

    const name = splitted.slice(1).join('/').split('.astro')[0]

    if (!name.includes('...') && !name.includes('ui')) {
      folderArray.push(name)
      folderArray.sort((a, b) => a.split('/').length - b.split('/').length)
    }
  }
})
---

<Layout
  header={false}
  footer={false}
  pixelPerfectImages={[]}
>
  <div class="nav">
    {
      Array.from(components).map(([folderName, componentNames]) => {
        return (
          <div class="nav__folder">
            <div class="nav__folder__title">{folderName}</div>
            <div class="nav__folder__list">
              <div class="nav__folder__list__inner">
                {componentNames.map((name) => {
                  let href =
                    folderName === 'pages'
                      ? ('/' + name.replace('index', '/')).replace('//', '/')
                      : `/ui/${folderName}/${name}`

                  href =
                    href.endsWith('/') && href !== '/'
                      ? href.slice(0, -1)
                      : href

                  return (
                    <a
                      class="nav__link"
                      data-morph-skip
                      href={href}
                    >
                      {name}
                    </a>
                  )
                })}
              </div>
            </div>
          </div>
        )
      })
    }
  </div>
</Layout>

<style is:global>
  .nav {
    width: 100%;
    height: 100%;

    padding: 0rem var(--screen-horisontal-padding);
    padding-bottom: var(--header-height);

    display: grid;
    grid-auto-rows: max-content;
    gap: 4rem;
  }

  .nav__folder {
    display: block;
  }

  .nav__folder__title {
    text-transform: capitalize;
    font-size: 2rem;
    font-weight: 600;
    cursor: pointer;
  }

  .nav__folder__list {
    width: 100%;

    @media (max-width: 768px) {
      width: 100%;
    }
  }

  .nav__folder__list__inner {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 3rem;
    padding-top: 2rem;
    padding-left: 2rem;

    /* @media (max-width: 1600px) {
      grid-template-columns: repeat(4, 1fr);
    } */

    @media (max-width: 768px) {
      grid-template-columns: repeat(1, 1fr);
    }
  }

  .nav__link {
    font-size: 1.6rem;
    width: max-content;
    white-space: break-all;
  }
</style>
