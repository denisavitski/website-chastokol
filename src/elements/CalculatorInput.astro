---
import FormInput, { type Props as FormInputProps } from './FormInput.astro'
import FormSelect, { type Props as FormSelectProps } from './FormSelect.astro'
import Icon from './Icon.astro'

export const backgroundColor = 'white'

export interface Props extends FormInputProps, FormSelectProps {
  class?: string
  label?: string
  info?: string
  tag?: 'input' | 'select'
}

const {
  class: className,
  label = 'Кол-во ворот',
  info,
  tag = 'input',
  ...rest
} = Astro.props

const Tag = tag === 'input' ? FormInput : FormSelect
---

<Tag
  {...rest}
  class={`calculator-input ${className || ''}`}
>
  <span
    class="calculator-input__top"
    slot="top"
  >
    {
      info && (
        <e-calculator-input-info-button
          target={info}
          class="calculator-input__info-button"
          data-prevent-focus
        >
          <Icon
            name={'info'}
            class="calculator-input__info-button__icon"
          />
        </e-calculator-input-info-button>
      )
    }
    <span
      class="calculator-input__name f-d-body-large-medium-16 f-m-body-basic-medium-14"
      set:html={label}
    />
  </span>
</Tag>

<style is:global>
  .calculator-input {
    --background-color: var(--color-grayscale-100);
  }

  .calculator-input__top {
    display: flex;
    align-items: center;
    gap: 1.5rem;

    margin-bottom: 1.45rem;

    @media (max-width: 768px) {
      margin-bottom: 1rem;
    }
  }

  .calculator-input__info-button {
    --icon-size: 2rem;
    --type: toggle;

    width: var(--icon-size);
    height: var(--icon-size);

    @media (max-width: 768px) {
      --icon-size: 1.4rem;
    }
  }

  .calculator-input__info-button__icon {
    width: 100%;
    height: 100%;

    fill: var(--color-grayscale-600);

    .calculator-input__info-button.opened & {
      fill: var(--color-primary-100);
    }
  }
</style>

<script>
  import { PopoverButtonElement } from 'aptechka/popover'
  import type { FormSelectElement } from './FormSelect.astro.0.mts'

  export class CalculatorInputInfoButtonElement extends PopoverButtonElement {
    #selectElement: FormSelectElement | null = null

    protected override connectedCallback() {
      super.connectedCallback()

      const wrapperElement = this.closest('.calculator-input')

      if (wrapperElement?.tagName === 'E-FORM-SELECT') {
        this.#selectElement = wrapperElement as FormSelectElement

        this.#selectElement.addEventListener(
          'change',
          this.#selectChangeListener,
        )

        this.#changeModal()
      }
    }

    protected override disconnectedCallback() {
      super.disconnectedCallback()

      this.#selectElement?.removeEventListener(
        'change',
        this.#selectChangeListener,
      )
    }

    #changeModal() {
      const opened = this.popoverElement?.opened
      this.popoverElement?.close()

      const name = this.#selectElement?.name
      const value = this.#selectElement?.value

      if (name && value) {
        const selector = `[data-group="${name}"][data-value="${value}"]`

        this.changePopover(selector)

        if (opened) {
          this.popoverElement.open()
        }
      }
    }

    #selectChangeListener = () => {
      this.#changeModal()
    }
  }

  if (!customElements.get('e-calculator-input-info-button')) {
    customElements.define(
      'e-calculator-input-info-button',
      CalculatorInputInfoButtonElement,
    )
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-calculator-input-info-button': CalculatorInputInfoButtonElement
    }
  }
</script>
