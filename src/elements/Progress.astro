---
export interface Props {
  class?: string
  steps?: number
}

const { class: className, steps = 8, ...rest } = Astro.props
---

<e-progress
  {...rest}
  steps={steps}
  class:list={[className, 'progress']}
>
  <div
    class="progress__title f-d-body-large-regular-16 f-m-body-basic-regular-14"
  >
    Прогресс - <span
      class="progress__title__percent f-d-body-large-medium-16 f-m-body-basic-medium-14"
    ></span>
  </div>

  <div class="progress__steps"></div>
</e-progress>

<style is:global>
  .progress {
    --color: var(--color-primary-100);

    &.state-1 {
      --color: #f34848;
    }

    &.state-2 {
      --color: #ff8833;
    }

    &.state-3 {
      --color: #fcc900;
    }

    &.state-4 {
      --color: var(--color-primary-100);
    }
  }

  .progress__title {
    margin-bottom: 2.5rem;
  }

  .progress__title__percent {
    color: var(--color);

    transition-property: color;
    transition-duration: var(--duration-button);
  }

  .progress__steps {
    display: flex;
    gap: 1.5rem;

    @media (max-width: 768px) {
      gap: 1rem;
    }
  }

  .progress__step {
    width: 100%;
    height: 0.4rem;
    border-radius: 100rem;

    transition-property: background-color;
    transition-duration: var(--duration-button);

    background-color: var(--color-grayscale-200);

    &.active {
      background-color: var(--color);
    }

    @media (max-width: 768px) {
      height: 0.3rem;
    }
  }
</style>

<script>
  export class ProgressElement extends HTMLElement {
    #percentElement: HTMLElement | null = null
    #stepElements: Array<HTMLElement> = []

    public setStep(value: number) {
      this.#stepElements.forEach((el, i) => {
        if (i <= value - 1) {
          el.classList.add('active')
        } else {
          el.classList.remove('active')
        }
      })

      const percent = Math.floor((value / this.#stepElements.length) * 100)

      if (this.#percentElement) {
        this.#percentElement.textContent = percent.toString() + '%'
      }

      this.classList.remove('state-1', 'state-2', 'state-3', 'state-4')

      if (percent < 30) {
        this.classList.add('state-1')
      } else if (percent >= 30 && percent < 60) {
        this.classList.add('state-2')
      } else if (percent >= 60 && percent < 80) {
        this.classList.add('state-3')
      } else if (percent >= 80) {
        this.classList.add('state-4')
      }
    }

    protected connectedCallback() {
      this.#stepElements = []

      const steps = parseInt(this.getAttribute('steps') || '8')

      this.#percentElement = this.querySelector('.progress__title__percent')

      const containerElement = this.querySelector('.progress__steps')

      for (let step = 0; step < steps; step++) {
        const element = document.createElement('div')
        element.className = 'progress__step'
        containerElement?.appendChild(element)
        this.#stepElements.push(element)
      }

      this.setStep(1)
    }
  }

  if (!customElements.get('e-progress')) {
    customElements.define('e-progress', ProgressElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-progress': ProgressElement
    }
  }
</script>
