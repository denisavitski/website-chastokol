---
import ResetButton from './ResetButton.astro'
import SearchButton from './SearchButton.astro'

export interface Props {
  class?: string
  suggestions?: {
    title: string
    list: Array<string>
  }
}

const {
  class: className,
  suggestions = {
    title: 'Популярные запросы:',
    list: ['Заборы из сетки', 'Деревянные заборы', 'Кованые заборы'],
  },
  ...rest
} = Astro.props
---

<!-- 
  Элемент собирает все кнопки(search__suggestion) и
  при нажатии на которые подставляет их текст в инпут(search__input).
-->
<e-search
  {...rest}
  class:list={[className, 'search']}
>
  <form class="search__form">
    <input
      type="text"
      class="f-d-body-large-regular-16 search__input"
      placeholder="Что вы хотите найти?"
    />
    <SearchButton class="search__submit" />
    <ResetButton class="search__reset" />
  </form>
  <div class="f-d-footnote-regular-12 search__suggestions">
    <div class="search__suggestions__title">Популярные запросы:</div>
    <div class="search__suggestions__list">
      <button class="search__suggestion">Заборы из сетки</button>
      <button class="search__suggestion">Деревянные заборы</button>
      <button class="search__suggestion">Кованые заборы</button>
    </div>
  </div>
</e-search>

<style is:global>
  .search {
    display: block;
    width: 100%;
    padding: 0 1rem;
  }

  .search__form {
    width: 100%;
    margin-bottom: 1.5rem;

    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .search__input {
    width: 100%;
    height: 5rem;
    padding: 0 2rem;

    border-radius: 0.7rem;
    border: 0.1rem solid var(--color-grayscale-300);

    &::placeholder {
      color: var(--color-grayscale-400);
    }
  }

  .search__reset {
    flex-shrink: 0;
  }

  .search__suggestions {
    display: flex;
    align-items: center;
  }

  .search__suggestions__title {
    flex-shrink: 0;
    margin-right: 1.5rem;
  }

  .search__suggestions__list {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 1.5rem;
  }

  .search__suggestion {
    padding: 0 1rem;
    height: 2.5rem;

    background-color: var(--color-grayscale-100);
    border-radius: 0.7rem;
  }
</style>

<script>
  export class SearchElement extends HTMLElement {
    #suggestionButtonElements: Array<HTMLElement> = []
    #inputElement: HTMLInputElement | null = null

    protected connectedCallback() {
      this.#inputElement =
        this.querySelector<HTMLInputElement>('.search__input')

      this.#suggestionButtonElements = [
        ...this.querySelectorAll<HTMLElement>('.search__suggestion'),
      ]

      this.#suggestionButtonElements.forEach((element) => {
        element.addEventListener('click', this.#clickListener)
      })
    }

    protected disconnectedCallback() {}

    #clickListener = (e: Event) => {
      const ct = e.currentTarget as HTMLElement

      const text = ct.textContent

      if (text && this.#inputElement) {
        this.#inputElement.value = text
      }
    }
  }

  if (!customElements.get('e-search')) {
    customElements.define('e-search', SearchElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-search': SearchElement
    }
  }
</script>
