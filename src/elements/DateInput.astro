---
import FormInput, { type Props as FormInputProps } from './FormInput.astro'
import Icon from './Icon.astro'

export interface Props extends FormInputProps {
  class?: string
}

const { class: className, ...rest } = Astro.props
---

<FormInput
  class={`${className || ''} date-input`}
  disabled
  placeholder="Дата монтажа"
  name="date"
  tag="e-date-input"
  target="calendar"
  {...rest}
>
  <slot
    name="top"
    slot="top"
  />

  <slot
    name="outside-label"
    slot="outside-label"
  />

  <Icon
    name={'calendar'}
    class="date-input__icon"
  />
</FormInput>

<style is:global>
  .date-input {
    cursor: pointer;

    .form-input__input {
      cursor: inherit;
    }
  }

  .date-input__icon {
    position: absolute;
    top: 50%;
    right: 2rem;

    width: 1.9rem;
    height: 1.9rem;

    fill: var(--color-grayscale-400);

    transform: translateY(-50%);

    @media (max-width: 768px) {
      right: 1.3rem;

      width: 1.4rem;
      height: 1.4rem;
    }
  }
</style>

<script>
  import { PopoverButtonElement } from 'aptechka/popover'

  export class CalendarInputElement extends PopoverButtonElement {
    #inputElement: HTMLInputElement | null = null

    public setValue(value: string) {
      if (this.#inputElement) {
        this.#inputElement.value = value
      }
    }

    protected override connectedCallback() {
      super.connectedCallback()
      this.#inputElement = this.querySelector('input')
    }
  }

  if (!customElements.get('e-date-input')) {
    customElements.define('e-date-input', CalendarInputElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-date-input': CalendarInputElement
    }
  }
</script>
