---
import { typography } from '@utils/typography'
import type { HTMLAttributes } from 'astro/types'
import Icon from './Icon.astro'

export interface Props extends HTMLAttributes<any> {
  class?: string
  modal?: string
  href?: string
  name?: string
  theme?: 'default' | 'icon-right' | 'icon-left' | 'underline'
  font?: string | Array<string>
  hasLoadingState?: boolean
}

const {
  class: className,
  modal,
  target,
  href,
  theme = 'default',
  font = [typography.desktop['body-large-medium-16']],
  hasLoadingState = true,
  ...rest
} = Astro.props

let Tag = 'button' as any

if (modal) {
  Tag = 'e-popover-button'
} else if (href) {
  Tag = 'a'
}

const hasIcon = theme === 'icon-left' || theme === 'icon-right'
---

<Tag
  {...rest}
  target={modal || target}
  href={href}
  class:list={[[font].flat(), 'flat-button', className]}
  data-theme={theme}
>
  <span class="flat-button__content">
    <span class="flat-button__name"><slot>Кнопка</slot></span>
    {
      hasIcon ? (
        <Icon
          class="flat-button__arrow"
          name={'tail-arrow'}
        />
      ) : null
    }
  </span>

  {
    hasLoadingState ? (
      <span class="flat-button__loading">Загрузка...</span>
    ) : null
  }
</Tag>

<style is:global>
  .flat-button {
    --color: var(--color-grayscale-700);

    position: relative;

    display: inline-block;

    color: var(--color);
    cursor: pointer;

    overflow: hidden;

    transition-property: color;
    transition-duration: var(--duration-button);

    &[disabled],
    &[data-disabled] {
      --color: var(--color-button-disabled);
      cursor: default;
    }

    &.loading {
      cursor: default;
      --color: var(--color-grayscale-400);
    }

    @media (hover: hover) {
      &:not(.loading):not(disabled):not([data-disabled]):hover {
        --color: var(--color-grayscale-400);
      }
    }
  }

  .flat-button__content {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;

    .flat-button[data-theme='icon-left'] & {
      flex-direction: row-reverse;
    }

    .flat-button.loading & {
      pointer-events: none;
      opacity: 0;
    }
  }

  .flat-button__name {
  }

  .flat-button__arrow {
    width: 1.6rem;
    height: 1.6rem;

    transition-property: stroke;
    transition-duration: var(--duration-button);

    stroke: var(--color);
    fill: none;
  }

  .flat-button__loading {
    position: absolute;
    top: 0;
    left: 0;

    width: 100%;
    height: 100%;

    display: flex;
    align-items: center;
    justify-content: center;

    opacity: 0;
    pointer-events: none;

    .flat-button.loading & {
      opacity: 1;
      pointer-events: auto;
    }
  }

  .flat-button__loading,
  .flat-button__content {
    width: 100%;
    height: 100%;

    transition-property: opacity;
    transition-duration: var(--duration-button);
  }
</style>
