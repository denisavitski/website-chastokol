---
export interface Props {
  class?: string
  target?: string
}

const { class: className, target = 'menu', ...rest } = Astro.props
---

<e-popover-button
  {...rest}
  class:list={[
    className,
    'f-d-body-large-medium-16 f-m-body-basic-medium-14 menu-button',
  ]}
  {target}
>
  <div class="menu-button__icon"></div>

  <div class="menu-button__name">
    <div class="menu-button__name__closed">
      <slot />
    </div>
    <div class="menu-button__name__opened"> Закрыть </div>
  </div>
</e-popover-button>

<style is:global>
  .menu-button {
    --type: toggle;
    --color: var(--color-grayscale-600);

    padding: 0 1.5rem;
    height: 3.7rem;

    display: inline-flex;
    align-items: center;
    gap: 1.08rem;

    border-radius: 3rem;

    background-color: var(--color-grayscale-0);
    border: 1px solid var(--color-grayscale-0);

    transition-property: background-color, border-color;
    transition-duration: var(--duration-menu);

    &.opened {
      --color: var(--color-grayscale-0);
      background-color: var(--color-primary-100);
      border-color: var(--color-primary-100);
    }

    @media (max-width: 768px) {
      height: 3.2rem;
    }
  }

  .menu-button__icon {
    position: relative;

    width: 1.92rem;
    height: 1.92rem;

    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;

    &::before,
    &::after {
      content: '';

      position: absolute;

      width: 100%;
      height: 0.16rem;
      border-radius: 1rem;
      background-color: var(--color);

      transition:
        background-color var(--duration-menu),
        transform var(--duration-menu);
    }

    &::before {
      transform: translateY(-0.3rem) rotate(0);
    }

    &::after {
      transform: translateY(0.3rem) rotate(0);
    }

    .menu-button.opened &::before {
      transform: translateY(0) rotate(45deg);
    }

    .menu-button.opened &::after {
      transform: translateY(0) rotate(-45deg);
    }
  }

  .menu-button__name {
    display: grid;

    transition: color var(--duration-menu);
    color: var(--color);

    overflow: hidden;
  }

  .menu-button__name__closed,
  .menu-button__name__opened {
    grid-column: 1/1;
    grid-row: 1/1;

    line-height: 1;

    transition: transform var(--duration-menu);
  }

  .menu-button__name__closed {
    .menu-button.opened & {
      transform: translateY(-101%);
    }
  }

  .menu-button__name__opened {
    transform: translateY(101%);

    @media (min-width: 769px) {
      .menu-button.opened & {
        transform: translateY(0);
      }
    }

    @media (max-width: 768px) {
      width: 0px;

      transition-property: transform, width;
      transition-duration: var(--duration-menu);

      .menu-button.triggered & {
        width: 5.5rem;
      }

      .menu-button.opened & {
        transition-delay: var(--duration-menu);
        transform: translateY(0);
      }
    }
  }
</style>
