---
import ArrowHint from './ArrowHint.astro'
import CheckboxButton from './CheckboxButton.astro'
import Icon from './Icon.astro'
import Manager2 from './Manager2.astro'
import Progress from './Progress.astro'
import ThankYou from './ThankYou.astro'

export const backgroundColor = '#F7F7F7'

export interface Props {
  class?: string
}

const { class: className, ...rest } = Astro.props
---

<e-calculator
  {...rest}
  class:list={[className, 'calculator']}
>
  <div class="calculator__left">
    <div class="calculator__help">
      <div
        class="calculator__help__title f-d-body-large-regular-16 f-m-footnote-regular-12"
        set:html={'Подсказка, появится при клике на'}
      />
      <Icon
        class="calculator__help__question"
        name={'question'}
      />
    </div>

    <div class="calculator__left__grid"></div>

    <div class="calculator__manager-wrapper">
      <ArrowHint
        class="calculator__manager-hint"
        arrowPosition={'bottom-left'}
        text="В нашей компании вы можете приобрести любую конструкцию, а так же ее установку под ключ"
        font="f-d-body-large-regular-16 f-m-footnote-regular-12"
      />
      <Manager2 class="calculator__manager" />
    </div>
  </div>

  <div class="calculator__right">
    <CheckboxButton
      class="calculator__picket"
      value="Забор из штекетника"
      name="picket"
    />

    <div
      class="calculator__step-name f-d-title-medium-42 f-m-title-medium-24"
      set:html="Выберите тип забора"
    />

    <Progress
      class="calculator__progress"
      max={99}
      steps={8}
    />

    <div class="calculator__right__grid">
      <div
        data-name="Выберите тип забора"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Выберите материал"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Выберите цвет"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Ворота и калитки"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Заполните параметры"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Выберите основу забора"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Требуются ли вам доп. услуги"
        class="calculator__step"
      >
      </div>
      <div
        data-name="Данные для связи с вами"
        class="calculator__step"
      >
      </div>
      <div class="calculator__step">
        <ThankYou class="calculator__thank-you" />
      </div>
    </div>

    <div class="calculator__nav">
      <button
        class="calculator__prev-button f-d-body-large-regular-16 f-m-body-basic-medium-14"
        type="button"
        >Назад</button
      >
      <button
        class="calculator__next-button f-d-body-large-medium-16 f-m-body-basic-medium-14"
        type="button"
        >Продолжить</button
      >
    </div>
  </div>
</e-calculator>

<style is:global>
  .calculator {
    --padding: 5rem;

    position: relative;

    width: 100%;
    height: 79.3rem;

    display: flex;

    background-color: var(--color-grayscale-0);
    border-radius: var(--border-radius);

    overflow: hidden;

    @media (max-width: 768px) {
      --padding: 2rem;
      flex-direction: column-reverse;
    }
  }

  .calculator__left {
    position: relative;

    display: flex;
    flex-direction: column;

    width: 51.7rem;
    padding: var(--padding);

    @media (min-width: 769px) {
      border-right: 0.1rem solid var(--color-grayscale-300);
    }

    @media (max-width: 768px) {
      border-top: 0.1rem solid var(--color-grayscale-300);
      width: 100%;
    }
  }

  .calculator__help {
    display: inline-flex;
    align-items: center;
    gap: 1.5rem;

    margin-bottom: 5rem;

    @media (max-width: 768px) {
      margin-bottom: 2rem;

      gap: 1rem;
    }
  }

  .calculator__help__title {
  }

  .calculator__help__question {
    width: 2rem;
    height: 2rem;

    fill: var(--color-grayscale-600);

    @media (max-width: 768px) {
      width: 1.3rem;
      height: 1.3rem;
    }
  }

  .calculator__left__grid {
  }

  .calculator__manager-wrapper {
    position: relative;

    margin-top: auto;
  }

  .calculator__manager-hint {
    width: 100%;
    margin-bottom: 4.2rem;

    padding: 1.2rem 1.6rem;

    &.inactive {
      display: none;
    }

    @media (max-width: 768px) {
      padding: 1.3rem;
    }
  }

  .calculator__manager {
    border: 0.1rem solid var(--color-grayscale-300);

    width: 100%;

    .manager-2__main {
      padding: 2rem;
      gap: 4rem;

      @media (max-width: 768px) {
        padding: 1rem;
        gap: 2rem;
      }
    }

    .manager-2__image {
      flex-shrink: 0;

      width: 12rem;
      height: 12rem;

      @media (max-width: 768px) {
        width: 7.5rem;
        height: 7.5rem;
      }
    }

    .manager-2__right {
      padding: 0;
      background-color: unset;
    }

    .manager-2__method {
      padding: 0 2rem;

      @media (max-width: 768px) {
        padding: 0 1rem;
      }
    }
  }

  .calculator__right {
    flex-grow: 1;

    padding: var(--padding);

    display: flex;
    flex-direction: column;
  }

  .calculator__picket {
    margin-bottom: 5rem;

    .checkbox__title {
      color: var(--color-grayscale-400);
    }

    @media (max-width: 768px) {
      margin-bottom: 3rem;
    }
  }

  .calculator__step-name {
    margin-bottom: 3rem;
  }

  .calculator__progress {
    margin-bottom: 5rem;

    @media (max-width: 768px) {
      margin-bottom: 3rem;
    }
  }

  .calculator__right__grid {
    margin-bottom: 7rem;

    @media (max-width: 768px) {
      margin-bottom: 2rem;
    }
  }

  .calculator__step {
    display: none;

    &.active {
      display: block;
    }
  }

  .calculator__type {
  }

  .calculator__nav {
    display: flex;
    align-items: center;
    gap: 1.5rem;

    @media (min-width: 769px) {
      margin-top: auto;
      margin-left: auto;
    }

    @media (max-width: 768px) {
      gap: 1rem;
    }
  }

  .calculator__prev-button,
  .calculator__next-button {
    height: 4.5rem;
    padding: 0 2rem;
    border-radius: 3rem;

    @media (max-width: 768px) {
      height: 4rem;
      padding: 0 1.5rem;
    }
  }

  .calculator__prev-button {
    border: 0.1rem solid var(--color-grayscale-300);
    color: var(--color-grayscale-400);
  }

  .calculator__next-button {
    color: var(--color-grayscale-0);
    background-color: var(--color-primary-100);
  }

  .calculator__thank-you {
    position: absolute;
    top: 0;
    left: 0;

    z-index: 2;

    width: 100%;
    height: 100%;

    background-color: var(--color-grayscale-0);
  }
</style>

<script>
  import { clamp } from 'aptechka/utils'
  import type { ProgressElement } from './Progress.astro.0.mts'

  export class CalculatorElement extends HTMLElement {
    #stepNameElement: HTMLElement | null = null
    #prevButtonElement: HTMLElement | null = null
    #nextButtonElement: HTMLElement | null = null
    #stepElements: Array<HTMLElement> = []
    #managerHintElement: HTMLElement | null = null
    #progressElement: ProgressElement | null = null

    #stepCounter = 0

    public setStep(value: number) {
      this.#stepCounter = clamp(value, 0, this.#stepElements.length - 1)

      if (this.#stepCounter > 0) {
        this.#managerHintElement?.classList.add('inactive')
      } else {
        this.#managerHintElement?.classList.remove('inactive')
      }

      this.#stepElements.forEach((element, i) => {
        if (i === this.#stepCounter) {
          element.classList.add('active')
        } else {
          element.classList.remove('active')
        }
      })

      const currentStepElement = this.#stepElements[this.#stepCounter]

      if (currentStepElement) {
        const name = currentStepElement.getAttribute('data-name')

        if (name && this.#stepNameElement) {
          this.#stepNameElement.innerHTML = name
        }
      }

      this.#progressElement?.setStep(this.#stepCounter + 1)
    }

    public shiftStep(value: number) {
      this.setStep(this.#stepCounter + value)
    }

    protected connectedCallback() {
      this.#stepNameElement = this.querySelector('.calculator__step-name')

      this.#stepElements = [
        ...this.querySelectorAll<HTMLElement>('.calculator__step'),
      ]

      this.#prevButtonElement = this.querySelector('.calculator__prev-button')
      this.#prevButtonElement?.addEventListener(
        'click',
        this.#prevButtonListener,
      )

      this.#nextButtonElement = this.querySelector('.calculator__next-button')
      this.#nextButtonElement?.addEventListener(
        'click',
        this.#nextButtonListener,
      )

      this.#managerHintElement = this.querySelector('.calculator__manager-hint')

      this.#progressElement = this.querySelector('.calculator__progress')

      customElements.whenDefined('e-progress').then(() => {
        if (this.isConnected) {
          this.setStep(0)
        }
      })
    }

    protected disconnectedCallback() {}

    #prevButtonListener = () => {
      this.shiftStep(-1)
    }

    #nextButtonListener = () => {
      this.shiftStep(1)
    }
  }

  if (!customElements.get('e-calculator')) {
    customElements.define('e-calculator', CalculatorElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-calculator': CalculatorElement
    }
  }
</script>
