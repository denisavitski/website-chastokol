---
import FormInput, { type Props as FormInputProps } from './FormInput.astro'
import Icon from './Icon.astro'

export interface Props extends Omit<FormInputProps, 'disabled'> {
  class?: string
  options?: Array<string>
}

const {
  class: className,
  options = ['Option 1', 'Option 2'],
  ...rest
} = Astro.props
---

<FormInput
  {...rest}
  class:list={[className, 'form-select']}
  tag="e-form-select"
  readonly
  autocompleteOff
  tabindex="0"
>
  <slot
    name="top"
    slot="top"
  />

  <Icon
    name={'arrow-down'}
    class="form-select__icon"
  />

  <div
    class="form-select__options"
    slot="after"
  >
    {
      options.map((option) => {
        return (
          <button
            class="form-select__option f-d-body-large-regular-16 f-m-body-basic-regular-14"
            data-value={option}
            set:html={option}
            type="button"
          />
        )
      })
    }
  </div>
</FormInput>

<style is:global>
  .form-select {
    position: relative;
    cursor: pointer;
    user-select: none;

    input {
      cursor: pointer;
    }
  }

  .form-select__icon {
    position: absolute;
    right: 1rem;
    top: calc(var(--input-height) / 2);

    width: 2rem;
    height: 2rem;

    stroke: var(--color-grayscale-700);
    fill: none;

    transform: translateY(-50%);

    .form-select.opened & {
      transform: translateY(-50%) scaleY(-1);
      stroke: var(--color-primary-100);
    }
  }

  .form-select__options {
    position: absolute;
    left: 0;
    top: calc(100% + 0.6rem);

    z-index: 2;

    width: 100%;
    padding: 0.4rem;

    display: none;
    grid-auto-rows: max-content;

    border-radius: 1.5rem;
    border: 0.1rem solid var(--color-primary-100);
    background-color: var(--color-grayscale-0);

    .form-select.opened & {
      display: grid;
    }
  }

  .form-select__option {
    --padding: 1.6rem;

    position: relative;

    height: var(--input-height);
    text-align: start;

    padding: 0 var(--padding);

    border-radius: 1.2rem;

    &.checked {
      color: var(--color-grayscale-0);
      background-color: var(--color-primary-100);
    }

    &:not(:last-of-type):after {
      content: '';

      position: absolute;
      top: 100%;
      left: var(--padding);

      width: calc(100% - var(--padding) * 2);
      height: 0.1rem;

      background-color: var(--color-grayscale-300);
    }
  }
</style>

<script>
  import { ClassLinkedStatus } from 'aptechka/class-linked-status'
  import { debounce } from 'aptechka/utils'

  export class FormSelectElement extends HTMLElement {
    #inputElement: HTMLInputElement | null = null
    #optionElements: Array<HTMLElement> = []
    #status = new ClassLinkedStatus(this, { opened: false })

    constructor() {
      super()

      this.addEventListener('focusin', this.#focusListener)
      this.addEventListener('focusout', this.#blurListener)
    }

    public get value() {
      return this.#inputElement?.value
    }

    public set value(value: string | undefined) {
      this.#optionElements.forEach((element) => {
        const elementValue = element.getAttribute('data-value')

        if (elementValue === value) {
          element.classList.add('checked')
        } else {
          element.classList.remove('checked')
        }
      })

      if (this.#inputElement) {
        this.#inputElement.value = value || ''
        this.#inputElement.dispatchEvent(new Event('change', { bubbles: true }))
      }
    }

    protected connectedCallback() {
      this.#inputElement = this.querySelector('input')

      this.#optionElements = [
        ...this.querySelectorAll<HTMLElement>('.form-select__option'),
      ]

      this.#optionElements.forEach((element) => {
        element.addEventListener('focus', this.#optionFocusListener)
        element.addEventListener('click', this.#optionListener)
      })

      if (this.#inputElement) {
        this.value = this.#inputElement.value
      }
    }

    protected disconnectedCallback() {
      this.#optionElements.forEach((element) => {
        element.removeEventListener('click', this.#optionListener)
      })

      this.#status.reset()
    }

    #optionListener = (e: Event) => {
      const ct = e.currentTarget as HTMLElement
      const value = ct.getAttribute('data-value')

      if (value) {
        this.value = value
        this.#toggle(false)
      }
    }

    #focusListener = (e: Event) => {
      const target = e.target as HTMLElement

      if (!target.closest('[data-prevent-focus]')) {
        this.#debouncedToggle(true)
      }
    }

    #blurListener = () => {
      this.#debouncedToggle(false)
    }

    #optionFocusListener = () => {
      this.#toggle(true)
    }

    #toggle = (open: boolean) => {
      this.#status.set('opened', open)
    }

    #debouncedToggle = debounce((open: boolean) => {
      this.#toggle(open)
    }, 0)
  }

  if (!customElements.get('e-form-select')) {
    customElements.define('e-form-select', FormSelectElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-form-select': FormSelectElement
    }
  }
</script>
