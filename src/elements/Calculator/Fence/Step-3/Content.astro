---
import CalculatorStep from '@elements/Calculator/CalculatorStep.astro'

import ColorOption, {
  type Props as ColorOptionProps,
} from '@elements/ColorOption.astro'

export interface Props {
  cards?: Array<ColorOptionProps>
}

const {
  cards = [
    { color: '#9B9B9B', id: 'RAL 7004', name: 'Серый', checked: true },
    { color: '#DDC49A', id: 'RAL 1004', name: 'Бежевый' },
    { color: '#FF5733', id: 'RAL 3020', name: 'Красный' },
    { color: '#33FF57', id: 'RAL 6018', name: 'Зеленый' },
    { color: '#3357FF', id: 'RAL 5002', name: 'Синий' },
    { color: '#FFC300', id: 'RAL 1023', name: 'Желтый' },
    { color: '#8E44AD', id: 'RAL 4005', name: 'Фиолетовый' },
    { color: '#FF69B4', id: 'RAL 4010', name: 'Розовый' },
    { color: '#34495E', id: 'RAL 7015', name: 'Темно-серый' },
    { color: '#E74C3C', id: 'RAL 2002', name: 'Оранжево-красный' },
  ],
} = Astro.props
---

<CalculatorStep
  type={'content'}
  name="Выберите цвет"
>
  <e-calculator-colors class="calculator__color-options">
    {
      cards.map((card) => {
        return (
          <ColorOption
            {...card}
            class="calculator__color-option"
            type={'input'}
            required
            inputName={'fence-color'}
          />
        )
      })
    }
  </e-calculator-colors>
</CalculatorStep>

<style is:global>
  .calculator__color-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2.5rem 5rem;

    @media (max-width: 768px) {
      gap: 1.5rem;
      max-height: 22.9rem;
    }
  }

  .calculator__color-option {
    --unchecked-color: 255;
    --checked-color: 250;
  }
</style>

<script>
  import type { CalculatorElement } from '@elements/Calculator/Calculator.astro.0.mjs'
  import type { ImageCloakElement } from '@lib/ImageCloak'

  export class CalculatorColorsElement extends HTMLElement {
    #calculatorElement: CalculatorElement | null = null
    #colorInputElements: Array<HTMLInputElement> = []
    #imageElement: ImageCloakElement | null = null

    protected async connectedCallback() {
      this.#calculatorElement = this.closest('e-calculator')

      this.#colorInputElements = [
        ...this.querySelectorAll<HTMLInputElement>('.color-option__input'),
      ]

      this.#colorInputElements.forEach((el) => {
        el.addEventListener('change', this.#inputListener)
      })

      this.#imageElement =
        this.#calculatorElement?.querySelector(
          '.calculator-color-info__image',
        ) || null

      await customElements.whenDefined('image-cloak')

      const lastChecked = this.#colorInputElements.findLast((element) => {
        return element.checked
      })

      if (lastChecked) {
        this.#updateImage(lastChecked)
      }
    }

    protected disconnectedCallback() {
      this.#colorInputElements.forEach((el) => {
        el.removeEventListener('change', this.#inputListener)
      })
    }

    #updateImage(inputElement: HTMLElement) {
      const image = inputElement.getAttribute('data-image')

      if (image && this.#imageElement) {
        this.#imageElement.updateImage(image)
      }
    }

    #inputListener = (e: Event) => {
      const ct = e.currentTarget as HTMLInputElement

      const image = ct.getAttribute('data-image')

      if (image && this.#imageElement) {
        this.#imageElement.updateImage(image)
      }
    }
  }

  if (!customElements.get('e-calculator-colors')) {
    customElements.define('e-calculator-colors', CalculatorColorsElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-calculator-colors': CalculatorColorsElement
    }
  }
</script>
