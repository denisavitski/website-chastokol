---
import ArrowHint from '@elements/ArrowHint.astro'
import CheckboxButton from '@elements/CheckboxButton.astro'
import Icon from '@elements/Icon.astro'
import Manager2 from '@elements/Manager2.astro'
import Progress from '@elements/Progress.astro'
import ThankYou from '@elements/ThankYou.astro'

export const backgroundColor = '#F7F7F7'

export interface Props {
  class?: string
  steps?: number | string
}

const { class: className, steps = 8, ...rest } = Astro.props
---

<e-calculator
  {...rest}
  class:list={[className, 'calculator']}
>
  <form class="calculator__form">
    <div class="calculator__left">
      <div class="calculator__help">
        <div
          class="calculator__help__title f-d-body-large-regular-16 f-m-footnote-regular-12"
          set:html={'Подсказка, появится при клике на'}
        />
        <Icon
          class="calculator__help__question"
          name={'question'}
        />
      </div>

      <div class="calculator__left__grid">
        <slot name="step-info" />
      </div>

      <div class="calculator__manager-wrapper">
        <ArrowHint
          class="calculator__manager-hint"
          arrowPosition={'bottom-left'}
          text="В нашей компании вы можете приобрести любую конструкцию, а так же ее установку под ключ"
          font="f-d-body-large-regular-16 f-m-footnote-regular-12"
        />
        <Manager2 class="calculator__manager" />
      </div>
    </div>

    <div class="calculator__right">
      <CheckboxButton
        class="calculator__picket"
        value="Забор из штекетника"
        name="picket"
      />

      <div class="calculator__step-name f-d-title-medium-42 f-m-title-medium-24"
      ></div>

      <Progress
        class="calculator__progress"
        max={99}
        steps={steps}
      />

      <div class="calculator__right__grid">
        <slot name="step-content" />

        <div class="calculator__step">
          <ThankYou class="calculator__thank-you" />
        </div>
      </div>

      <div class="calculator__nav">
        <button
          class="calculator__prev-button f-d-body-large-regular-16 f-m-body-basic-medium-14"
          type="button"
          >Назад</button
        >
        <button
          class="calculator__next-button f-d-body-large-medium-16 f-m-body-basic-medium-14"
          type="button"
          >Продолжить</button
        >
      </div>
    </div>
  </form>
</e-calculator>

<style is:global>
  .calculator {
    --padding: 5rem;

    position: relative;

    width: 100%;
    height: 79.3rem;

    display: flex;

    background-color: var(--color-grayscale-0);
    border-radius: var(--border-radius);

    @media (max-width: 768px) {
      --padding: 2rem;
      height: unset;
      flex-direction: column-reverse;
    }
  }

  .calculator__form {
    display: contents;
  }

  .calculator__left {
    position: relative;

    display: flex;
    flex-direction: column;

    width: 51.7rem;
    padding: var(--padding);

    @media (min-width: 769px) {
      border-right: 0.1rem solid var(--color-grayscale-300);
    }

    @media (max-width: 768px) {
      border-top: 0.1rem solid var(--color-grayscale-300);
      width: 100%;
    }
  }

  .calculator__help {
    display: inline-flex;
    align-items: center;
    gap: 1.5rem;

    margin-bottom: 5rem;

    @media (max-width: 768px) {
      margin-bottom: 2rem;

      gap: 1rem;
    }
  }

  .calculator__help__title {
  }

  .calculator__help__question {
    width: 2rem;
    height: 2rem;

    fill: var(--color-grayscale-600);

    @media (max-width: 768px) {
      width: 1.3rem;
      height: 1.3rem;
    }
  }

  .calculator__left__grid {
    flex-basis: 100%;
    overflow: hidden;
  }

  .calculator__manager-wrapper {
    position: relative;

    margin-top: auto;
  }

  .calculator__manager-hint {
    width: 100%;
    margin-bottom: 4.2rem;

    padding: 1.2rem 1.6rem;

    &.inactive {
      display: none;
    }

    @media (max-width: 768px) {
      padding: 1.3rem;
    }
  }

  .calculator__manager {
    border: 0.1rem solid var(--color-grayscale-300);

    width: 100%;

    .manager-2__main {
      padding: 2rem;
      gap: 4rem;

      @media (max-width: 768px) {
        padding: 1rem;
        gap: 2rem;
      }
    }

    .manager-2__image {
      flex-shrink: 0;

      width: 12rem;
      height: 12rem;

      @media (max-width: 768px) {
        width: 7.5rem;
        height: 7.5rem;
      }
    }

    .manager-2__right {
      padding: 0;
      background-color: unset;
    }

    .manager-2__method {
      padding: 0 2rem;

      @media (max-width: 768px) {
        padding: 0 1rem;
      }
    }
  }

  .calculator__right {
    flex-grow: 1;

    padding: var(--padding);

    display: flex;
    flex-direction: column;
  }

  .calculator__picket {
    margin-bottom: 5rem;

    .checkbox__title {
      color: var(--color-grayscale-400);
    }

    @media (max-width: 768px) {
      margin-bottom: 3rem;
    }
  }

  .calculator__step-name {
    margin-bottom: 3rem;
  }

  .calculator__progress {
    margin-bottom: 5rem;

    @media (max-width: 768px) {
      margin-bottom: 3rem;
    }
  }

  .calculator__right__grid {
    flex-basis: 100%;

    overflow: hidden;

    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      margin-bottom: 2rem;
    }
  }

  .calculator__type {
  }

  .calculator__nav {
    display: flex;
    align-items: center;
    gap: 1.5rem;

    @media (min-width: 769px) {
      margin-top: auto;
      margin-left: auto;
    }

    @media (max-width: 768px) {
      gap: 1rem;
    }
  }

  .calculator__prev-button,
  .calculator__next-button {
    height: 4.5rem;
    padding: 0 2rem;
    border-radius: 3rem;

    @media (max-width: 768px) {
      height: 4rem;
      padding: 0 1.5rem;
    }
  }

  .calculator__prev-button {
    border: 0.1rem solid var(--color-grayscale-300);
    color: var(--color-grayscale-400);
    user-select: none;

    display: none;

    .calculator:not([data-step='1']) & {
      display: block;
    }
  }

  .calculator__next-button {
    color: var(--color-grayscale-0);
    background-color: var(--color-primary-100);
    user-select: none;
  }

  .calculator__thank-you {
    position: absolute;
    top: 0;
    left: 0;

    z-index: 2;

    width: 100%;
    height: 100%;

    background-color: var(--color-grayscale-0);

    border-radius: var(--border-radius);
  }
</style>

<script>
  import { clamp } from 'aptechka/utils'
  import type { ProgressElement } from '@elements/Progress.astro.0.mts'

  export class CalculatorElement extends HTMLElement {
    #stepNameElement: HTMLElement | null = null
    #prevButtonElement: HTMLElement | null = null
    #nextButtonElement: HTMLElement | null = null
    #stepElements: Array<HTMLElement> = []
    #stepInfoElements: Array<HTMLElement> = []
    #managerHintElement: HTMLElement | null = null
    #progressElement: ProgressElement | null = null
    #currentInputElements: Array<HTMLInputElement> = []

    #stepCounter = 0

    #stepsResult: Array<Array<{ name: string; value: string }>> = []

    public setStep(value: number) {
      const newCounterValue = clamp(value, 0, this.#stepElements.length - 1)

      if (
        newCounterValue > this.#stepCounter &&
        !this.#currentInputElements.every(
          (el) => !el.checkVisibility() || el.validity.valid,
        )
      ) {
        const firstVisible = this.#currentInputElements.find((el) => {
          return el.checkVisibility()
        })

        firstVisible?.reportValidity()

        return
      }

      this.#stepCounter = newCounterValue

      this.setAttribute('data-step', (this.#stepCounter + 1).toString())

      if (this.#stepCounter > 0) {
        this.#managerHintElement?.classList.add('inactive')
      } else {
        this.#managerHintElement?.classList.remove('inactive')
      }

      this.#stepElements.forEach((element, i) => {
        if (i === this.#stepCounter) {
          element.classList.remove('unactive')
        } else {
          element.classList.add('unactive')
        }
      })

      this.#stepInfoElements.forEach((element, i) => {
        if (i === this.#stepCounter) {
          element.classList.remove('unactive')
        } else {
          element.classList.add('unactive')
        }
      })

      const currentStepElement = this.#stepElements[this.#stepCounter]

      if (currentStepElement) {
        this.#currentInputElements.forEach((element) => {
          element.removeEventListener('input', this.#currentInputListener)
          element.removeEventListener('change', this.#currentInputListener)
        })

        this.#currentInputElements = [
          ...currentStepElement.querySelectorAll('input'),
        ]

        this.#currentInputElements.forEach((element) => {
          this.#toggleElement(element, true)

          const filter = element.getAttribute('data-filter')

          const filterItems = filter
            ?.split(',')
            .map((v) => v.split(':'))
            .map((v) => {
              return {
                name: v[0]?.trim(),
                value: v[1]?.trim(),
              }
            })

          if (filterItems) {
            const slicedStepsResult = this.#stepsResult.slice(
              0,
              this.#stepCounter,
            )

            const filterResult = filterItems.filter((filterItem) => {
              const stepItems = slicedStepsResult.find((step) => {
                return step.find(
                  (stepItem) => stepItem.name === filterItem.name,
                )
              })

              return stepItems?.every(
                (stepItem) => stepItem.value === filterItem.value,
              )
            })

            if (!filterResult.length) {
              this.#toggleElement(element, false)
            }
          }

          element.addEventListener('input', this.#currentInputListener)
          element.addEventListener('change', this.#currentInputListener)
        })

        const name = currentStepElement.getAttribute('data-name')

        if (name && this.#stepNameElement) {
          this.#stepNameElement.innerHTML = name
        }
      }

      this.#progressElement?.setStep(this.#stepCounter + 1)
    }

    public shiftStep(value: number) {
      this.setStep(this.#stepCounter + value)
    }

    protected connectedCallback() {
      this.#stepNameElement = this.querySelector('.calculator__step-name')

      this.#stepElements = [
        ...this.querySelectorAll<HTMLElement>('.calculator__step'),
      ]

      this.#stepInfoElements = [
        ...this.querySelectorAll<HTMLElement>('.calculator__step-info'),
      ]

      this.#prevButtonElement = this.querySelector('.calculator__prev-button')
      this.#prevButtonElement?.addEventListener(
        'click',
        this.#prevButtonListener,
      )

      this.#nextButtonElement = this.querySelector('.calculator__next-button')
      this.#nextButtonElement?.addEventListener(
        'click',
        this.#nextButtonListener,
      )

      this.#managerHintElement = this.querySelector('.calculator__manager-hint')

      this.#progressElement = this.querySelector('.calculator__progress')

      customElements.whenDefined('e-progress').then(() => {
        if (this.isConnected) {
          this.setStep(0)
        }
      })
    }

    protected disconnectedCallback() {}

    #prevButtonListener = () => {
      this.shiftStep(-1)
    }

    #nextButtonListener = () => {
      this.shiftStep(1)
    }

    #currentInputListener = (e: Event) => {
      const el = e.currentTarget as HTMLInputElement

      const name = el.name
      const value = el.value

      let arr = this.#stepsResult[this.#stepCounter]

      if (!arr) {
        arr = []

        this.#stepsResult[this.#stepCounter] = arr
      }

      let obj = arr.find((item) => item.name === name)

      if (!obj) {
        obj = { name, value: '' }
        arr.push(obj)
      }

      obj.value = value
    }

    #toggleElement(element: HTMLElement, visible = false) {
      const wrapperElement =
        (element.closest('.hide') as HTMLElement) || element

      wrapperElement.style.display = visible ? '' : 'none'
    }
  }

  if (!customElements.get('e-calculator')) {
    customElements.define('e-calculator', CalculatorElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-calculator': CalculatorElement
    }
  }
</script>
