---
import './MapWorkMarker.astro'

export interface Props {
  class?: string
}

const { class: className, ...rest } = Astro.props
---

<!-- 
  Доступ к инстансу карты можно получить так:

  const mapElement = document.querySelector('e-map')
  
  mapElement.addEventListener('mapReady', () => {
    console.log(mapElement.isReady, mapElement.map)
  })
 -->
<e-map
  {...rest}
  class:list={[className]}
>
  <slot />
</e-map>

<script>
  import type { YMap } from '@yandex/ymaps3-types'
  import { dispatchEvent } from 'aptechka/utils'
  import type { MapWorkMarkerData } from './MapWorkMarker.astro'

  export interface MapEvents {
    mapReady: CustomEvent
  }

  export class MapElement extends HTMLElement {
    #map: YMap | null = null
    #isReady = false

    public get map() {
      return this.#map
    }

    public get isReady() {
      return this.#isReady
    }

    protected async connectedCallback() {
      if (!(window as any).ymaps3) {
        console.warn(this, `ymaps3 не найден`)
        return
      }

      await ymaps3.ready

      this.#map = new ymaps3.YMap(
        this,

        {
          location: {
            center: [37.588144, 55.733842],

            zoom: 10,
          },
        },
      )

      // Добавляем слой для отображения схематической карты
      this.#map.addChild(new ymaps3.YMapDefaultSchemeLayer({}))
      this.#map.addChild(new ymaps3.YMapDefaultFeaturesLayer({}))

      await customElements.whenDefined('e-map-work-marker')

      const workElements = this.querySelectorAll('e-map-work-marker')

      workElements.forEach((element) => {
        this.#map!.addChild(
          this.#createWorkMarker({
            image: element.image,
            description: element.description,
            lat: element.lat,
            lng: element.lng,
            name: element.name,
          }),
        )
      })

      this.#isReady = true

      dispatchEvent(this, 'mapReady', { custom: true })
    }

    protected disconnectedCallback() {
      this.#map?.destroy()
    }

    #createWorkMarker(data: MapWorkMarkerData) {
      const markerElement = document.createElement('div')
      markerElement.className = 'work-marker'
      markerElement.innerHTML = `
        <img class="work-marker__image" src="${data.image}" lazy />
        <div class="work-marker__name">${data.name}</div>
        <div class="work-marker__description">${data.description}</div>
      `

      const marker = new ymaps3.YMapMarker(
        {
          coordinates: [
            parseFloat(data.lng.toString()),
            parseFloat(data.lat.toString()),
          ],
        },
        markerElement,
      )

      return marker
    }
  }

  if (!customElements.get('e-map')) {
    customElements.define('e-map', MapElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-map': MapElement
    }
    interface HTMLElementEventMap extends MapEvents {}
  }
</script>
