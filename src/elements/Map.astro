---
import './MapWorkMarker.astro'

export interface Props {
  class?: string
  lng?: string | number
  lat?: string | number
  zoom?: string | number
}

const {
  class: className,
  lng = '37.588144',
  lat = '55.733842',
  zoom = '10',
  ...rest
} = Astro.props
---

<!-- 
  Доступ к инстансу карты можно получить так:

  const mapElement = document.querySelector('e-map')
  
  mapElement.addEventListener('mapReady', () => {
    console.log(mapElement.isReady, mapElement.map)
  })
 -->
<e-map
  {...rest}
  {lng}
  {lat}
  {zoom}
  class:list={[className]}
>
  <slot />
</e-map>

<script>
  import type { YMap, YMapMarker } from '@yandex/ymaps3-types'
  import { dispatchEvent } from 'aptechka/utils'
  import type { MapWorkMarkerData } from './MapWorkMarker.astro'

  export interface MapEvents {
    mapReady: CustomEvent
  }

  export class MapElement extends HTMLElement {
    #map: YMap | null = null
    #isReady = false
    #markers: Array<YMapMarker> = []

    public get map() {
      return this.#map
    }

    public get isReady() {
      return this.#isReady
    }

    protected async connectedCallback() {
      if (!(window as any).ymaps3) {
        console.warn(this, `ymaps3 не найден`)
        return
      }

      await ymaps3.ready

      const lng = parseFloat(this.getAttribute('lng') || '37.588144')
      const lat = parseFloat(this.getAttribute('lat') || '55.733842')
      const zoom = parseFloat(this.getAttribute('zoom') || '10')

      this.#map = new ymaps3.YMap(
        this,

        {
          location: {
            center: [lng, lat],
            zoom: zoom,
          },
        },
      )

      // Добавляем слой для отображения схематической карты
      this.#map.addChild(new ymaps3.YMapDefaultSchemeLayer({}))
      this.#map.addChild(new ymaps3.YMapDefaultFeaturesLayer({}))

      await customElements.whenDefined('e-map-work-marker')

      const workElements = this.querySelectorAll('e-map-work-marker')

      workElements.forEach((element) => {
        const marker = this.#createWorkMarker({
          markerImage: element.markerImage,
          image: element.image,
          description: element.description,
          lat: element.lat,
          lng: element.lng,
          name: element.name,
        })

        this.#markers.push(marker)

        this.#map!.addChild(marker)
      })

      this.#isReady = true

      dispatchEvent(this, 'mapReady', { custom: true })
    }

    protected disconnectedCallback() {
      this.#map?.destroy()
    }

    #createWorkMarker(data: MapWorkMarkerData) {
      const markerElement = document.createElement('div')
      markerElement.className = 'work-marker'
      markerElement.innerHTML = `
        <img class="work-marker__image" srcset="${data.markerImage}" loading="lazy" />
        <div class="work-marker__popover">
          <img class="work-marker__popover__image" srcset="${data.image}" loading="lazy" />
          <div class="work-marker__popover__name">${data.name}</div>
          <div class="work-marker__popover__description">${data.description}</div>
        </div>
      `

      const marker = new ymaps3.YMapMarker(
        {
          coordinates: [
            parseFloat(data.lng.toString()),
            parseFloat(data.lat.toString()),
          ],
          onFastClick: () => {
            this.#markers.forEach((m) => {
              if (m === marker) {
                this.#map?.update({
                  location: {
                    center: m.coordinates,
                    duration: 500,
                    zoom: 14,
                    easing: 'ease-in-out',
                  },
                })

                m.update({ zIndex: 1000 })
                m.element.classList.add('active')
              } else {
                m.update({ zIndex: 0 })
                m.element.classList.remove('active')
              }
            })
          },
        },
        markerElement,
      )

      return marker
    }
  }

  if (!customElements.get('e-map')) {
    customElements.define('e-map', MapElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-map': MapElement
    }
    interface HTMLElementEventMap extends MapEvents {}
  }
</script>
