---
import CommonModal from '@elements/CommonModal.astro'
import Media from '@elements/Media.astro'

export const modal = '#video-modal'

export interface Props {}

const {} = Astro.props
---

<!-- SINGLETON -->
<CommonModal
  id="video-modal"
  class="video-modal"
  tag="e-video-modal"
>
  <Media
    class="video-modal__content"
    media={false}
    cover={false}
  />
</CommonModal>

<style is:global>
  .video-modal {
  }

  .video-modal__content {
    width: 124.4rem;
    height: 70rem;

    @media (max-width: 768px) {
      width: 100%;
      height: 21.5rem;
      max-height: 100%;
      border-radius: 0;
    }
  }
</style>

<script>
  import type { MediaFrameElement } from '@elements/Media.astro.0.mjs'
  import { PopoverElement } from 'aptechka/popover'

  export class VideoModalElement extends PopoverElement {
    #mediaFrameElement: MediaFrameElement | null = null

    constructor() {
      super()

      this.addEventListener('popoverTriggered', (e) => {
        if (
          e.detail.trigger instanceof HTMLElement &&
          this.#mediaFrameElement
        ) {
          const media = e.detail.trigger.getAttribute('data-media')

          if (media) {
            this.#mediaFrameElement.update(media)
            this.#mediaFrameElement.play()
          }
        }
      })
    }

    protected override connectedCallback() {
      super.connectedCallback()

      this.#mediaFrameElement = this.querySelector('e-media-frame')
    }

    protected override disconnectedCallback() {
      super.disconnectedCallback()
    }
  }

  if (!customElements.get('e-video-modal')) {
    customElements.define('e-video-modal', VideoModalElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-video-modal': VideoModalElement
    }
  }
</script>
